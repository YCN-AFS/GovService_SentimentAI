import streamlit as st
import pandas as pd
import json
import plotly.express as px
from sentiment_analysis import SentimentAnalyzer
import torch
import requests
import os

# Thi·∫øt l·∫≠p giao di·ªán
st.set_page_config(
    page_title="Sentiment Analysis System",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS
st.markdown("""
    <style>
    .main {
        padding: 0rem 1rem;
    }
    .stTextInput>div>div>input {
        padding: 0.5rem;
    }
    .stButton>button {
        width: 100%;
        padding: 0.5rem;
        background-color: #4CAF50;
        color: white;
    }
    .sentiment-box {
        padding: 1.5rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        color: #000000;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }
    .positive {
        background-color: #ffffff;
        border: 2px solid #4CAF50;
    }
    .negative {
        background-color: #ffffff;
        border: 2px solid #F44336;
    }
    .sentiment-box h3 {
        color: #1a237e;
        margin-bottom: 1.5rem;
        font-weight: 600;
        text-shadow: 1px 1px 1px rgba(0,0,0,0.1);
    }
    .sentiment-box p {
        margin: 0.8rem 0;
        font-size: 1.1rem;
        line-height: 1.5;
        background: rgba(255,255,255,0.9);
        padding: 0.5rem;
        border-radius: 4px;
    }
    .sentiment-box b {
        color: #1a237e;
        font-weight: 600;
        margin-right: 0.5rem;
    }
    </style>
    """, unsafe_allow_html=True)

@st.cache_resource
def load_model():
    """Load model from Hugging Face"""
    model_path = 'phobert_sentiment.pth'
    if not os.path.exists(model_path):
        # Hi·ªÉn th·ªã tr·∫°ng th√°i t·∫£i
        with st.spinner('ƒêang t·∫£i model t·ª´ Hugging Face...'):
            url = "https://huggingface.co/FoxCodes/GovService_SentimentAI/resolve/main/phobert_sentiment.pth?download=true"
            response = requests.get(url)
            
            # L∆∞u model
            with open(model_path, 'wb') as f:
                f.write(response.content)
            st.success('‚úÖ ƒê√£ t·∫£i xong model!')
    
    # Kh·ªüi t·∫°o analyzer v·ªõi model ƒë√£ t·∫£i
    analyzer = SentimentAnalyzer()
    analyzer.load_model(model_path)
    return analyzer

def analyze_single_text(analyzer, text):
    result = analyzer.predict_phobert(text)
    return result

def analyze_file(analyzer, file):
    data = json.load(file)
    results = []
    
    for text in data.get('positive_feedback', []):
        result = analyze_single_text(analyzer, text)
        results.append({
            'text': text,
            'sentiment': result['sentiment'],
            'confidence': result['confidence'],
            'expected': 'Positive'
        })
    
    for text in data.get('negative_feedback', []):
        result = analyze_single_text(analyzer, text)
        results.append({
            'text': text,
            'sentiment': result['sentiment'],
            'confidence': result['confidence'],
            'expected': 'Negative'
        })
    
    return pd.DataFrame(results)

def main():
    st.title("üéØ Sentiment Analysis System")
    st.markdown("### Ph√¢n t√≠ch c·∫£m x√∫c trong ƒë√°nh gi√° d·ªãch v·ª• c√¥ng")
    
    # Ki·ªÉm tra CUDA
    cuda_available = torch.cuda.is_available()
    if cuda_available:
        st.success(f"‚úÖ CUDA available - Using GPU: {torch.cuda.get_device_name(0)}")
    else:
        st.warning("‚ö†Ô∏è CUDA not available - Using CPU")
    
    # Load model
    analyzer = load_model()
    
    # Sidebar
    st.sidebar.title("üìå Ch·ª©c nƒÉng")
    analysis_type = st.sidebar.radio(
        "Ch·ªçn ch·∫ø ƒë·ªô ph√¢n t√≠ch:",
        ["Ph√¢n t√≠ch vƒÉn b·∫£n", "Ph√¢n t√≠ch file JSON"]
    )
    
    if analysis_type == "Ph√¢n t√≠ch vƒÉn b·∫£n":
        st.markdown("## üìù Nh·∫≠p vƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch")
        text_input = st.text_area("", height=100)
        
        if st.button("Ph√¢n t√≠ch"):
            if text_input:
                with st.spinner('ƒêang ph√¢n t√≠ch...'):
                    result = analyze_single_text(analyzer, text_input)
                
                # Hi·ªÉn th·ªã k·∫øt qu·∫£
                sentiment_class = 'positive' if result['sentiment'] == 'Positive' else 'negative'
                st.markdown(f"""
                    <div class='sentiment-box {sentiment_class}'>
                        <h3>K·∫øt qu·∫£ ph√¢n t√≠ch:</h3>
                        <p><b>C·∫£m x√∫c:</b> {result['sentiment']}</p>
                        <p><b>ƒê·ªô tin c·∫≠y:</b> {result['confidence']:.2%}</p>
                        <p><b>VƒÉn b·∫£n sau x·ª≠ l√Ω:</b> {result['processed_text']}</p>
                    </div>
                """, unsafe_allow_html=True)
            else:
                st.warning("Vui l√≤ng nh·∫≠p vƒÉn b·∫£n c·∫ßn ph√¢n t√≠ch!")
    
    else:  # Ph√¢n t√≠ch file JSON
        st.markdown("## üìÅ T·∫£i l√™n file JSON")
        uploaded_file = st.file_uploader("Ch·ªçn file JSON", type=['json'])
        
        if uploaded_file:
            with st.spinner('ƒêang ph√¢n t√≠ch...'):
                results_df = analyze_file(analyzer, uploaded_file)
                
                # Hi·ªÉn th·ªã th·ªëng k√™
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    total = len(results_df)
                    st.metric("T·ªïng s·ªë m·∫´u", total)
                
                with col2:
                    correct = sum(results_df['sentiment'] == results_df['expected'])
                    accuracy = correct / total
                    st.metric("S·ªë d·ª± ƒëo√°n ƒë√∫ng", f"{correct} ({accuracy:.2%})")
                
                with col3:
                    avg_confidence = results_df['confidence'].mean()
                    st.metric("ƒê·ªô tin c·∫≠y trung b√¨nh", f"{avg_confidence:.2%}")
                
                # V·∫Ω bi·ªÉu ƒë·ªì
                fig = px.bar(
                    results_df.groupby('expected')['sentiment'].value_counts().unstack(),
                    title="Ph√¢n ph·ªëi d·ª± ƒëo√°n theo nh√£n th·ª±c t·∫ø",
                    labels={'value': 'S·ªë l∆∞·ª£ng', 'expected': 'Nh√£n th·ª±c t·∫ø'}
                )
                st.plotly_chart(fig)
                
                # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
                st.markdown("### Chi ti·∫øt k·∫øt qu·∫£")
                st.dataframe(results_df)
                
                # T·∫£i xu·ªëng k·∫øt qu·∫£
                csv = results_df.to_csv(index=False).encode('utf-8-sig')
                st.download_button(
                    "üì• T·∫£i xu·ªëng k·∫øt qu·∫£ (CSV)",
                    csv,
                    "results.csv",
                    "text/csv",
                    key='download-csv'
                )

if __name__ == "__main__":
    main() 